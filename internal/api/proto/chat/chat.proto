syntax = "proto3";

package chat;

option go_package = "go-chat/api/proto/chat";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

message Message {
  string id = 1;
  string room_id = 2;
  string user_id = 3;
  string content = 4;
  google.protobuf.Timestamp created_at = 5;
}

message ChatEvent {
  enum EventType {
    UNKNOWN = 0;
    USER_JOINED = 1;
    USER_LEFT = 2;
    NEW_MESSAGE = 3;
  }
  
  string room_id = 1;
  string user_id = 2;
  EventType event_type = 3;
  Message message = 4; 
  google.protobuf.Timestamp timestamp = 5;
}

message GetMessagesRequest {
  string room_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message SendMessageRequest {
    string room_id = 1;
    string user_id = 2;
    string content = 3;
  }

message GetMessagesResponse {
  repeated Message messages = 1;
}

message WebSocketRequest {
  string room_id = 1;
  string user_id = 2;
}

service ChatService {
  // GetMessages - получение истории сообщений комнаты.
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse) {
    option (google.api.http) = {
      get: "/api/v1/chat/{room_id}/messages"
    };
  }

  // SendMessage - отправка нового сообщения.
  rpc SendMessage(SendMessageRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/chat/{room_id}/messages"
      body: "*"
    };
  }

  // Connect - установка WebSocket соединения.
  rpc Connect(WebSocketRequest) returns (stream ChatEvent) {
    option (google.api.http) = {
      get: "/api/v1/chat/{room_id}/ws"
    };
  }
}