swagger: '2.0'
info:
  title: Authentication Service API
  version: 1.0.0
  description: API for user authentication and management

basePath: /v1
schemes:
  - https

paths:
  /api/v1/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      operationId: "registerUser"
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/RegisterUserRequest'
      responses:
        201:
          description: User successfully registered
          schema:
            $ref: '#/definitions/AuthenticatedUserResponse'
        400:
          $ref: '#/responses/BadRequest'
        409:
          $ref: '#/responses/Conflict'

  /api/v1/login:
    post:
      summary: Authentication
      tags:
        - Authentication
      operationId: "loginUser"
      parameters:
        - in: body
          name: credentials
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        200:
          description: User successfully logged in
          schema:
            $ref: '#/definitions/AuthenticatedUserResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'

  /api/v1/refresh:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      operationId: "refreshToken"
      parameters:
        - in: body
          name: refreshToken
          required: true
          schema:
            $ref: '#/definitions/RefreshTokenRequest'
      responses:
        200:
          description: Tokens successfully refreshed
          schema:
            $ref: '#/definitions/AuthenticatedUserResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'

  /api/v1/users/{userId}:
    post:
      summary: Update user information
      tags:
        - User Management
      operationId: "updateUser"
      parameters:
        - in: path
          name: userId
          required: true
          type: string
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/UpdateUserRequest'
      security:
        - BearerAuth: []
      responses:
        200:
          description: User information successfully updated
          schema:
            $ref: '#/definitions/UserResponse'
        400:
          $ref: '#/responses/BadRequest'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'

    delete:
      summary: Delete user
      tags:
        - User Management
      operationId: "deleteUser"
      parameters:
        - in: path
          name: userId
          required: true
          type: string
      security:
        - BearerAuth: []
      responses:
        204:
          description: User successfully deleted
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'

definitions:
  RegisterUserRequest:
    type: object
    required:
      - email
      - password
      - name
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        format: password
      name:
        type: string
      nickname:
        type: string
      phoneNumber:
        type: string
      age:
        type: integer
        minimum: 16
      bio:
        type: string

  LoginRequest:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        format: password

  RefreshTokenRequest:
    type: object
    required:
      - refreshToken
    properties:
      refreshToken:
        type: string

  UpdateUserRequest:
    type: object
    properties:
      name:
        type: string
      nickname:
        type: string
      phoneNumber:
        type: string
      age:
        type: integer
        minimum: 16
      bio:
        type: string

  AuthenticatedUserResponse:
    type: object
    properties:
      userId:
        type: string
      email:
        type: string
      name:
        type: string
      nickname:
        type: string
      age:
        type: integer
      bio:
        type: string
      roles:
        type: array
        items:
          type: string
      expiresAt:
        type: string
        format: date-time
      tokenPair:
        $ref: '#/definitions/TokenPair'

  UserResponse:
    type: object
    properties:
      userId:
        type: string
      email:
        type: string
      name:
        type: string
      nickname:
        type: string
      age:
        type: integer
      bio:
        type: string
      roles:
        type: array
        items:
          type: string

  TokenPair:
    type: object
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string

  Error:
    type: object
    properties:
      message:
        type: string

responses:
  BadRequest:
    description: Bad request
    schema:
      $ref: '#/definitions/Error'

  Unauthorized:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'

  Forbidden:
    description: Forbidden
    schema:
      $ref: '#/definitions/Error'

  NotFound:
    description: Not found
    schema:
      $ref: '#/definitions/Error'

  Conflict:
    description: Conflict
    schema:
      $ref: '#/definitions/Error'

securityDefinitions:
  BearerAuth:
    type: apiKey
    in: header
    name: Authorization