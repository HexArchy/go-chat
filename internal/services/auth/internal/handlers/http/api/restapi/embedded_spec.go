// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for user authentication and management",
    "title": "Authentication Service API",
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/api/v1/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authentication",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "schema": {
              "$ref": "#/definitions/AuthenticatedUserResponse"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        }
      }
    },
    "/api/v1/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh access token",
        "operationId": "refreshToken",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tokens successfully refreshed",
            "schema": {
              "$ref": "#/definitions/AuthenticatedUserResponse"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          }
        }
      }
    },
    "/api/v1/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully registered",
            "schema": {
              "$ref": "#/definitions/AuthenticatedUserResponse"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          }
        }
      }
    },
    "/api/v1/users/{userId}": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "User Management"
        ],
        "summary": "Update user information",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User information successfully updated",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "User Management"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    }
  },
  "definitions": {
    "AuthenticatedUserResponse": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer"
        },
        "bio": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tokenPair": {
          "$ref": "#/definitions/TokenPair"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "RefreshTokenRequest": {
      "type": "object",
      "required": [
        "refreshToken"
      ],
      "properties": {
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "RegisterUserRequest": {
      "type": "object",
      "required": [
        "email",
        "password",
        "name"
      ],
      "properties": {
        "age": {
          "type": "integer",
          "minimum": 16
        },
        "bio": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "phoneNumber": {
          "type": "string"
        }
      }
    },
    "TokenPair": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "UpdateUserRequest": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "minimum": 16
        },
        "bio": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer"
        },
        "bio": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Conflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Forbidden": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "Not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for user authentication and management",
    "title": "Authentication Service API",
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/api/v1/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authentication",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "schema": {
              "$ref": "#/definitions/AuthenticatedUserResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh access token",
        "operationId": "refreshToken",
        "parameters": [
          {
            "name": "refreshToken",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tokens successfully refreshed",
            "schema": {
              "$ref": "#/definitions/AuthenticatedUserResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully registered",
            "schema": {
              "$ref": "#/definitions/AuthenticatedUserResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/v1/users/{userId}": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "User Management"
        ],
        "summary": "Update user information",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User information successfully updated",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "User Management"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AuthenticatedUserResponse": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer"
        },
        "bio": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tokenPair": {
          "$ref": "#/definitions/TokenPair"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "RefreshTokenRequest": {
      "type": "object",
      "required": [
        "refreshToken"
      ],
      "properties": {
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "RegisterUserRequest": {
      "type": "object",
      "required": [
        "email",
        "password",
        "name"
      ],
      "properties": {
        "age": {
          "type": "integer",
          "minimum": 16
        },
        "bio": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "phoneNumber": {
          "type": "string"
        }
      }
    },
    "TokenPair": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "UpdateUserRequest": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "minimum": 16
        },
        "bio": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer"
        },
        "bio": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Conflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Forbidden": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "Not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
}
