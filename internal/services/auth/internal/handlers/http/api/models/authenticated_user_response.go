// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthenticatedUserResponse authenticated user response
//
// swagger:model AuthenticatedUserResponse
type AuthenticatedUserResponse struct {

	// age
	Age int64 `json:"age,omitempty"`

	// bio
	Bio string `json:"bio,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// expires at
	// Format: date-time
	ExpiresAt strfmt.DateTime `json:"expiresAt,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nickname
	Nickname string `json:"nickname,omitempty"`

	// roles
	Roles []string `json:"roles"`

	// token pair
	TokenPair *TokenPair `json:"tokenPair,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`
}

// Validate validates this authenticated user response
func (m *AuthenticatedUserResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenPair(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticatedUserResponse) validateExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("expiresAt", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuthenticatedUserResponse) validateTokenPair(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenPair) { // not required
		return nil
	}

	if m.TokenPair != nil {
		if err := m.TokenPair.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenPair")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenPair")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this authenticated user response based on the context it is used
func (m *AuthenticatedUserResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTokenPair(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticatedUserResponse) contextValidateTokenPair(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenPair != nil {

		if swag.IsZero(m.TokenPair) { // not required
			return nil
		}

		if err := m.TokenPair.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenPair")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenPair")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthenticatedUserResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthenticatedUserResponse) UnmarshalBinary(b []byte) error {
	var res AuthenticatedUserResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
