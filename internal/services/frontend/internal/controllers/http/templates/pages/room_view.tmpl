{{ define "content" }}
<div
  class="flex-1 flex flex-col h-screen max-h-screen bg-slate-50"
  x-data="chat()"
>
  <div class="flex-1 min-h-0 flex flex-col">
    <!-- Room Header -->
    <div class="bg-white shadow-sm px-6 py-4">
      <div class="flex justify-between items-center max-w-6xl mx-auto">
        <div class="flex items-center space-x-4">
          <div class="flex-shrink-0">
            <div
              class="h-12 w-12 rounded-xl bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center shadow-lg transform transition-transform hover:scale-105"
            >
              <span
                class="text-white text-lg font-bold"
                >{{ slice .Room.Name 0 1 }}</span
              >
            </div>
          </div>
          <div>
            <h2 class="text-xl font-semibold text-gray-900">
              {{ .Room.Name }}
            </h2>
            <div class="flex items-center mt-1 text-sm text-gray-500 space-x-2">
              <span class="flex items-center">
                <span class="relative flex h-3 w-3 mr-2">
                  <span
                    class="animate-ping absolute inline-flex h-full w-full rounded-full bg-emerald-400 opacity-75"
                  ></span>
                  <span
                    class="relative inline-flex rounded-full h-3 w-3 bg-emerald-500"
                  ></span>
                </span>
                <span x-text="activeUsers + ' online'"></span>
              </span>
            </div>
          </div>
        </div>
        {{ if eq .User.ID .Room.OwnerID }}
        <form action="/rooms/{{ .Room.ID }}/delete" method="POST">
          <button
            type="submit"
            class="rounded-lg bg-rose-500 px-4 py-2.5 text-sm font-medium text-white shadow-sm transition-all hover:bg-rose-600 focus:ring-2 focus:ring-rose-500 focus:ring-offset-2 hover:shadow-md"
          >
            Delete Room
          </button>
        </form>
        {{ end }}
      </div>
    </div>

    <!-- Messages -->
    <div
      class="flex-1 min-h-0 overflow-y-auto px-4 py-6 sm:px-6 lg:px-8 space-y-4 bg-gradient-to-b from-slate-50 to-white"
      id="messages"
      x-ref="messageContainer"
    >
      <div class="max-w-6xl mx-auto space-y-6">
        <template x-for="message in messages" :key="message.id">
          <div
            :class="{'flex items-end space-x-3 mb-4': true, 'justify-end': message.user_id === currentUserId}"
          >
            <!-- Avatar for other users -->
            <template
              x-if="message.user_id !== currentUserId && message.user_id !== 'system'"
            >
              <div
                class="flex-shrink-0 cursor-pointer transform transition-transform hover:scale-105"
                @click="showUserProfile(message.user_id)"
              >
                <div
                  class="h-8 w-8 rounded-lg bg-gradient-to-br from-violet-500 to-indigo-600 flex items-center justify-center shadow-sm"
                >
                  <span
                    class="text-white text-sm font-medium"
                    x-text="getUserInitials(message.user_id)"
                  ></span>
                </div>
              </div>
            </template>

            <!-- Message content -->
            <div
              :class="{
                'flex max-w-[70%] flex-col': true,
                'items-end': message.user_id === currentUserId
              }"
            >
              <!-- System message -->
              <template x-if="message.user_id === 'system'">
                <div
                  class="bg-slate-100 rounded-lg px-4 py-2 text-sm text-slate-600 mx-auto my-2 max-w-md text-center shadow-sm"
                >
                  <p x-text="message.content"></p>
                </div>
              </template>

              <!-- User message -->
              <template x-if="message.user_id !== 'system'">
                <div>
                  <template x-if="message.user_id !== currentUserId">
                    <p
                      class="text-sm text-slate-500 mb-1 font-medium"
                      x-text="getUserName(message.user_id)"
                    ></p>
                  </template>

                  <div
                    :class="{
                      'rounded-2xl px-4 py-2.5 shadow-sm max-w-xl transition-all duration-200': true,
                      'bg-gradient-to-r from-indigo-500 to-purple-600 text-white': message.user_id === currentUserId,
                      'bg-white border border-slate-200': message.user_id !== currentUserId
                    }"
                  >
                    <p
                      class="text-sm leading-relaxed"
                      x-text="message.content"
                    ></p>
                    <span
                      :class="{
                        'text-xs mt-1.5 block font-medium': true,
                        'text-indigo-100': message.user_id === currentUserId,
                        'text-slate-400': message.user_id !== currentUserId
                      }"
                      x-text="formatTime(message.timestamp)"
                    ></span>
                  </div>
                </div>
              </template>
            </div>

            <!-- Avatar for current user -->
            <template x-if="message.user_id === currentUserId">
              <div class="flex-shrink-0">
                <div
                  class="h-8 w-8 rounded-lg bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center shadow-sm"
                >
                  <span
                    class="text-white text-sm font-medium"
                    x-text="getUserInitials(currentUserId)"
                  ></span>
                </div>
              </div>
            </template>
          </div>
        </template>
      </div>
    </div>

    <!-- Input Area -->
    <div class="bg-white border-t border-slate-200 px-4 py-4 sm:px-6 lg:px-8">
      <div class="max-w-6xl mx-auto">
        <form @submit.prevent="sendMessage" class="flex items-center space-x-4">
          <div class="flex-1 relative">
            <input
              type="text"
              x-model="newMessage"
              @keydown.enter="sendMessage"
              class="block w-full rounded-xl border-0 py-3 px-4 text-gray-900 shadow-sm ring-1 ring-inset ring-slate-200 placeholder:text-slate-400 focus:ring-2 focus:ring-inset focus:ring-indigo-500 transition-all duration-200 text-sm"
              placeholder="Type your message..."
            />
            <button
              type="button"
              class="absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-600 transition-colors duration-200"
            >
              <svg
                class="h-5 w-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                ></path>
              </svg>
            </button>
          </div>
          <button
            type="submit"
            class="inline-flex items-center rounded-xl bg-gradient-to-r from-indigo-500 to-purple-600 px-5 py-3 text-sm font-medium text-white shadow-sm transition-all duration-200 hover:shadow-md hover:opacity-90 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          >
            <svg
              class="h-5 w-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
              ></path>
            </svg>
            Send
          </button>
        </form>
      </div>
    </div>
  </div>

  <!-- User Profile Modal -->
  <div
    x-show="showProfile"
    class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm transition-opacity z-50"
    x-transition:enter="ease-out duration-300"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    x-transition:leave="ease-in duration-200"
    x-transition:leave-start="opacity-100"
    x-transition:leave-end="opacity-0"
  >
    <div class="fixed inset-0 z-50 overflow-y-auto">
      <div class="flex min-h-full items-center justify-center p-4">
        <div
          x-show="showProfile"
          class="relative transform overflow-hidden rounded-2xl bg-white px-6 pb-6 pt-5 text-left shadow-xl transition-all w-full max-w-md"
          x-transition:enter="ease-out duration-300"
          x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
          x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
          x-transition:leave="ease-in duration-200"
          x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
          x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        >
          <div>
            <div
              class="mx-auto h-24 w-24 rounded-2xl bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center shadow-lg"
            >
              <span
                class="text-3xl font-bold text-white"
                x-text="selectedUserInitials"
              ></span>
            </div>
            <div class="mt-4 text-center">
              <h3
                class="text-xl font-semibold text-gray-900"
                x-text="selectedUserName"
              ></h3>
              <div class="mt-2">
                <p
                  class="text-sm text-slate-500"
                  x-text="'User ID: ' + selectedUserId"
                ></p>
              </div>
            </div>
          </div>
          <div class="mt-6">
            <button
              type="button"
              class="inline-flex w-full justify-center rounded-xl bg-gradient-to-r from-indigo-500 to-purple-600 px-4 py-2.5 text-sm font-medium text-white shadow-sm transition-all duration-200 hover:shadow-md hover:opacity-90 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
              @click="showProfile = false"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function chat() {
    return {
      messages: [],
      newMessage: "",
      ws: null,
      currentUserId: "{{ .User.ID }}",
      roomId: "{{ .Room.ID }}",
      accessToken: "{{ .User.Token }}",
      activeUsers: 0,
      users: {},
      showProfile: false,
      selectedUserId: "",
      selectedUserName: "",
      selectedUserInitials: "",
      init() {
        this.users[this.currentUserId] = {
          name: "You",
          initials: this.getUserInitials(this.currentUserId),
        };

        const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
        const wsUrl = `${protocol}//${window.location.host}/ws/chat/${this.roomId}?token=${this.accessToken}`;

        this.ws = new WebSocket(wsUrl);

        this.ws.addEventListener("open", () => {
          console.log("WebSocket connection opened");
          this.ws.send(
            JSON.stringify({ type: "get_history", limit: 50, offset: 0 })
          );
        });

        this.ws.addEventListener("message", (event) => {
          const data = JSON.parse(event.data);
          this.handleEvent(data);
        });

        this.ws.addEventListener("close", () => {
          console.log("WebSocket connection closed");
        });

        this.ws.addEventListener("error", (event) => {
          console.error("WebSocket error:", event);
        });
      },
      handleEvent(event) {
        console.log("Event received:", event);
        switch (event.type) {
          case "message_history":
            const messages = event.payload.messages;
            this.messages = messages.concat(this.messages);
            messages.forEach((message) => {
              if (
                message.user_id &&
                message.user_id !== "system" &&
                !this.users[message.user_id]
              ) {
                this.users[message.user_id] = {
                  name: "User " + message.user_id.slice(0, 5),
                  initials: this.getUserInitials(message.user_id),
                };
              }
            });
            this.activeUsers = Object.keys(this.users).length;
            break;

          case "new_message":
            const message = event.payload;
            this.messages.push(message);
            if (
              message.user_id &&
              message.user_id !== "system" &&
              !this.users[message.user_id]
            ) {
              this.users[message.user_id] = {
                name: "User " + message.user_id.slice(0, 5),
                initials: this.getUserInitials(message.user_id),
              };
              this.activeUsers++;
            }
            this.$nextTick(() => {
              this.$refs.messageContainer.scrollTop =
                this.$refs.messageContainer.scrollHeight;
            });
            break;

          case "user_connected":
            const connectedUserId = event.user_id;
            if (!this.users[connectedUserId]) {
              this.users[connectedUserId] = {
                name: "User " + connectedUserId.slice(0, 5),
                initials: this.getUserInitials(connectedUserId),
              };
              this.activeUsers++;
              this.messages.push({
                id: Date.now(),
                user_id: "system",
                content: `${this.users[connectedUserId].name} joined the chat`,
                timestamp: new Date().toISOString(),
              });
            }
            break;

          case "user_disconnected":
            const disconnectedUserId = event.user_id;
            if (this.users[disconnectedUserId]) {
              const userName = this.users[disconnectedUserId].name;
              delete this.users[disconnectedUserId];
              this.activeUsers--;
              this.messages.push({
                id: Date.now(),
                user_id: "system",
                content: `${userName} left the chat`,
                timestamp: new Date().toISOString(),
              });
            }
            break;

          case "error":
            console.error("Error event:", event.payload);
            break;

          default:
            console.warn("Unknown event type:", event.type);
        }

        // Прокрутка к последнему сообщению после любого события
        this.$nextTick(() => {
          const container = this.$refs.messageContainer;
          container.scrollTop = container.scrollHeight;
        });
      },

      sendMessage() {
        if (this.newMessage.trim() === "") return;

        if (this.ws.readyState !== WebSocket.OPEN) {
          console.error("WebSocket is not open");
          return;
        }

        const message = {
          type: "message",
          content: this.newMessage.trim(),
        };

        this.ws.send(JSON.stringify(message));
        this.newMessage = "";
      },

      getUserName(userId) {
        if (userId === this.currentUserId) return "You";
        return this.users[userId]
          ? this.users[userId].name
          : `User ${userId.slice(0, 5)}`;
      },

      getUserInitials(userId) {
        const user = this.users[userId];
        if (!user) return "U";

        const name = user.name;
        if (name === "You") return "Y";

        return name
          .split(" ")
          .map((part) => part[0])
          .join("")
          .toUpperCase()
          .slice(0, 2);
      },

      formatTime(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const isToday = date.toDateString() === now.toDateString();

        const timeOptions = { hour: "2-digit", minute: "2-digit" };
        const dateOptions = { month: "short", day: "numeric" };

        if (isToday) {
          return date.toLocaleTimeString(undefined, timeOptions);
        }
        return `${date.toLocaleDateString(
          undefined,
          dateOptions
        )} ${date.toLocaleTimeString(undefined, timeOptions)}`;
      },

      showUserProfile(userId) {
        this.selectedUserId = userId;
        this.selectedUserName = this.getUserName(userId);
        this.selectedUserInitials = this.getUserInitials(userId);
        this.showProfile = true;
      },
    };
  }
</script>
{{ end }}
