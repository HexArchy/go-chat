version: "3.8"

services:
  auth-service:
    build:
      context: .
      dockerfile: internal/services/auth/Dockerfile
    environment:
      - AUTH_LOGGING_LEVEL=debug
      - AUTH_ENGINES_STORAGE_URL=postgresql://gochatuser:gochatpass@postgres:5432/gochat?sslmode=disable
      - AUTH_VAULT_ADDRESS=http://vault:8200
      - AUTH_VAULT_TOKEN=my-vault-token
      - AUTH_HANDLERS_HTTP_ADDRESS=0.0.0.0
      - AUTH_HANDLERS_HTTP_PORT=8080
      - AUTH_ENGINES_STORAGE_MAX_OPEN_CONNS=10
      - AUTH_ENGINES_STORAGE_MAX_IDLE_CONNS=5
      - AUTH_ENGINES_STORAGE_CONN_MAX_LIFETIME=1h
      - AUTH_VAULT_PATH=secret/data/auth
      - AUTH_VAULT_TIMEOUT=5m
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      vault-setup:
        condition: service_completed_successfully
    expose:
      - "8080"
      - "9090"
      - "9100"
    ports:
      - "8080:8080"
      - "9090:9090"
    networks:
      - backend

  website-service:
    build:
      context: .
      dockerfile: internal/services/website/Dockerfile
    environment:
      - WEBSITE_LOGGING_LEVEL=debug
      - WEBSITE_ENGINES_STORAGE_URL=postgresql://gochatuser:gochatpass@postgres:5432/gochat?sslmode=disable
      - WEBSITE_VAULT_ADDRESS=http://vault:8200
      - WEBSITE_VAULT_TOKEN=my-vault-token
      - WEBSITE_HANDLERS_HTTP_ADDRESS=0.0.0.0
      - WEBSITE_HANDLERS_HTTP_PORT=8081
      - WEBSITE_ENGINES_STORAGE_MAX_OPEN_CONNS=10
      - WEBSITE_ENGINES_STORAGE_MAX_IDLE_CONNS=5
      - WEBSITE_ENGINES_STORAGE_CONN_MAX_LIFETIME=1h
      - WEBSITE_VAULT_PATH=secret/data/auth
      - WEBSITE_VAULT_TIMEOUT=5m
      - WEBSITE_AUTH_SERVICE_ADDRESS=http://auth-service:9090
    depends_on:
      website-migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      vault-setup:
        condition: service_completed_successfully
    expose:
      - "8081"
      - "9091"
      - "9101"
    ports:
      - "8081:8081"
      - "9091:9091"
    networks:
      - backend

  chat-service:
    build:
      context: .
      dockerfile: internal/services/chat/Dockerfile
    environment:
      - CHAT_LOGGING_LEVEL=debug
      - CHAT_ENGINES_STORAGE_URL=postgresql://gochatuser:gochatpass@postgres:5432/gochat?sslmode=disable
      - CHAT_VAULT_ADDRESS=http://vault:8200
      - CHAT_VAULT_TOKEN=my-vault-token
      - CHAT_HANDLERS_HTTP_ADDRESS=0.0.0.0
      - CHAT_HANDLERS_HTTP_PORT=8082
      - CHAT_HANDLERS_GRPC_ADDRESS=0.0.0.0
      - CHAT_HANDLERS_GRPC_PORT=9092
      - CHAT_ENGINES_STORAGE_MAX_OPEN_CONNS=20
      - CHAT_ENGINES_STORAGE_MAX_IDLE_CONNS=10
      - CHAT_ENGINES_STORAGE_CONN_MAX_LIFETIME=1h
      - CHAT_VAULT_PATH=secret/data/auth
      - CHAT_VAULT_TIMEOUT=5m
      - CHAT_AUTH_SERVICE_ADDRESS=auth-service:9090
      - CHAT_WEBSITE_SERVICE_ADDRESS=website-service:9091
      - CHAT_WEBSOCKET_PING_INTERVAL=30s
      - CHAT_WEBSOCKET_PONG_WAIT=60s
      - CHAT_WEBSOCKET_MAX_MESSAGE_SIZE=4096
      - CHAT_WEBSOCKET_WRITE_WAIT=10s
      - CHAT_WEBSOCKET_MESSAGE_QUEUE_SIZE=256
    depends_on:
      chat-migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      vault-setup:
        condition: service_completed_successfully
      auth-service:
        condition: service_started
      website-service:
        condition: service_started
    ports:
      - "8082:8082"
      - "9092:9092"
    networks:
      - backend

  frontend-service:
    build:
      context: .
      dockerfile: internal/services/frontend/Dockerfile
    environment:
      - FRONTEND_LOGGING_LEVEL=debug
      - FRONTEND_HANDLERS_HTTP_ADDRESS=0.0.0.0
      - FRONTEND_HANDLERS_HTTP_PORT=8084
      - FRONTEND_HANDLERS_HTTP_READ_TIMEOUT=100s
      - FRONTEND_HANDLERS_HTTP_WRITE_TIMEOUTT=100s
      - FRONTEND_AUTH_SERVICE_ADDRESS=auth-service:9090
      - FRONTEND_WEBSITE_SERVICE_ADDRESS=website-service:9091
      - FRONTEND_CHAT_SERVICE_ADDRESS=chat-service:9092
      - FRONTEND_SESSION_SECRET=your-session-secret
      - FRONTEND_SESSION_MAX_AGE=24h
    depends_on:
      - auth-service
      - website-service
      - chat-service
    ports:
      - "8084:8084"
    networks:
      - backend
    volumes:
      - ./internal/services/frontend/internal/controllers/http/templates:/root/templates
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=gochat
      - POSTGRES_USER=gochatuser
      - POSTGRES_PASSWORD=gochatpass
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gochatuser -d gochat"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      - postgres
    networks:
      - backend

  vault:
    image: vault:1.13.3
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: my-vault-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_DEV_UI: "true"
      VAULT_ADDR: "http://vault.localhost:8200"
    command: server -dev -dev-root-token-id=my-vault-token
    volumes:
      - vault-data:/vault/data
    networks:
      - backend

  vault-setup:
    image: vault:1.13.3
    environment:
      VAULT_ADDR: "http://vault:8200"
    entrypoint: >
      /bin/sh -c "
        sleep 10;
        vault login my-vault-token;
        vault auth enable userpass || true;
        vault write auth/userpass/users/admin password=admin policies=root || true;
        vault kv put secret/auth access_secret=secret refresh_secret=secret service_token=secret;
      "
    networks:
      - backend

  migrate:
    build:
      context: .
      dockerfile: internal/services/auth/Dockerfile
    entrypoint: ["./migrate", "-config", "./configs/config.prod.yaml"]
    environment:
      - AUTH_ENGINES_STORAGE_URL=postgresql://gochatuser:gochatpass@postgres:5432/gochat?sslmode=disable
      - AUTH_VAULT_ADDRESS=http://vault:8200
      - AUTH_VAULT_TOKEN=my-vault-token
      - AUTH_VAULT_PATH=secret/data/auth
      - AUTH_VAULT_TIMEOUT=5m
      - AUTH_LOGGING_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      vault-setup:
        condition: service_completed_successfully
    networks:
      - backend

  website-migrate:
    build:
      context: .
      dockerfile: internal/services/website/Dockerfile
    entrypoint: ["./migrate", "-config", "./configs/config.prod.yaml"]
    environment:
      - WEBSITE_ENGINES_STORAGE_URL=postgresql://gochatuser:gochatpass@postgres:5432/gochat?sslmode=disable
      - WEBSITE_VAULT_ADDRESS=http://vault:8200
      - WEBSITE_VAULT_TOKEN=my-vault-token
      - WEBSITE_VAULT_PATH=secret/data/auth
      - WEBSITE_VAULT_TIMEOUT=5m
      - WEBSITE_LOGGING_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      vault-setup:
        condition: service_completed_successfully
    networks:
      - backend

  chat-migrate:
    build:
      context: .
      dockerfile: internal/services/chat/Dockerfile
    entrypoint: ["./migrate", "-config", "./configs/config.prod.yaml"]
    environment:
      - CHAT_ENGINES_STORAGE_URL=postgresql://gochatuser:gochatpass@postgres:5432/gochat?sslmode=disable
      - CHAT_VAULT_ADDRESS=http://vault:8200
      - CHAT_VAULT_TOKEN=my-vault-token
      - CHAT_VAULT_PATH=secret/data/auth
      - CHAT_VAULT_TIMEOUT=5m
      - CHAT_LOGGING_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
      vault-setup:
        condition: service_completed_successfully
    networks:
      - backend

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth-service
      - website-service
      - chat-service
      - swagger-ui
      - vault
      - pgadmin
      - prometheus
      - grafana
      - alertmanager
    networks:
      - backend

  swagger-ui:
    image: swaggerapi/swagger-ui
    environment:
      - SWAGGER_JSON=/swagger/auth.swagger.json
      - URLS[0].url=/swagger/auth.swagger.json
      - URLS[0].name=Auth API
      - URLS[1].url=/swagger/website.swagger.json
      - URLS[1].name=Website API
    volumes:
      - ./internal/api/generated/internal/api/proto/auth/auth.swagger.json:/swagger/auth.swagger.json
      - ./internal/api/generated/internal/api/proto/website/website.swagger.json:/swagger/website.swagger.json
    networks:
      - backend

  prometheus:
    image: prom/prometheus:v2.45.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
      - "--web.enable-lifecycle"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    expose:
      - "9090"
    networks:
      - backend
    depends_on:
      - auth-service
      - node-exporter

  alertmanager:
    image: prom/alertmanager:v0.26.0
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    expose:
      - "9093"
    networks:
      - backend
    depends_on:
      - prometheus

  grafana:
    image: grafana/grafana:10.0.3
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=grafana.localhost
      - GF_SERVER_ROOT_URL=http://grafana.localhost
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    expose:
      - "3000"
    networks:
      - backend
    depends_on:
      - prometheus
  node-exporter:
    image: prom/node-exporter:v1.6.1
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    expose:
      - "9100"
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres-data:
  vault-data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
